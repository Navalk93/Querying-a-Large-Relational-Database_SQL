USE CASE_STUDY

---CASE STUDY 1---

--I HAVE CREATED THREE DATASETS 1)FACT TABLE, 2) PRODUCT TABLE, 3) LOCATION TABLE--

Tasks to be performed:
--Q.1 Display the number of states present in the LocationTable.--
SOLUTION:

SELECT*FROM LOCATION_TABLE
SELECT DISTINCT STATE FROM LOCATION_TABLE

--Q.2 How many products are of regular type?--
SOLUTION:

SELECT* FROM PRODUCT_TABLE
SELECT TYPE FROM PRODUCT_TABLE WHERE TYPE='REGULAR'

--Q.3 How much spending has been done on marketing of product ID 1?--
SOLUTION:

SELECT* FROM FACT_TABLE
SELECT SUM(MARKETING) FROM FACT_TABLE WHERE PRODUCT_ID=1

--Q.4 What is the minimum sales of a product?--
SOLUTION:

SELECT* FROM FACT_TABLE
SELECT MIN(SALES) FROM FACT_TABLE

--Q.5  Display the max Cost of Good Sold (COGS).--
SOLUTION:

SELECT MAX(COGS) FROM FACT_TABLE

--Q.6  Display the details of the product where product type is coffee.--
SOLUTION:

SELECT*FROM PRODUCT_TABLE WHERE PRODUCT_TYPE='COFFEE'

--Q.7  Display the details where total expenses are greater than 40.--
SOLUTION:

SELECT*FROM FACT_TABLE WHERE TOTAL_EXPENSES>40

--Q.8 What is the average sales in area code 719--
SOLUTION:

SELECT AVG(SALES) FROM FACT_TABLE WHERE AREA_CODE=719

--Q.9 Find out the total profit generated by Colorado--
SOLUTION:

SELECT*FROM FACT_TABLE
SELECT*FROM LOCATION_TABLE

SELECT SUM(PROFIT) AS TOTAL_PROFIT, STATE FROM FACT_TABLE INNER JOIN LOCATION_TABLE ON FACT_TABLE.AREA_CODE=LOCATION_TABLE.AREA_CODE WHERE STATE='COLORADO' GROUP BY STATE

--Q.10  Display the average inventory for each product ID.--
SOLUTION:

SELECT PRODUCT_ID, AVG(INVENTORY) AS AVG_INVENTORY FROM FACT_TABLE GROUP BY PRODUCT_ID ORDER BY PRODUCT_ID ASC

--Q.11 Display state in a sequential order in a Location Table.--
SOLUTION:

SELECT STATE FROM LOCATION_TABLE ORDER BY STATE ASC

--Q.12 Display the average budget of the Product where the average budget margin should be grater than 100.--
SOLUTION:

SELECT AVG(BUDGET_MARGIN) AS AVG_BUDGET_MARGIN FROM FACT_TABLE GROUP BY PRODUCT_ID HAVING AVG(BUDGET_MARGIN)>100

--Q.13 What is the total sales done on date 2010-01-01?--
SOLUTION:

SELECT SUM(SALES) FROM FACT_TABLE WHERE DATE='2010-01-01'

--Q. 14  Display the average total expense of each product ID on an individual date.--
SOLUTION:

SELECT AVG(TOTAL_EXPENSES) AS AVG_TOTAL_EXP, PRODUCT_ID, DATE FROM FACT_TABLE GROUP BY PRODUCT_ID, DATE

--Q.5 Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code.--
solution:

SELECT*FROM FACT_TABLE
SELECT*FROM PRODUCT_TABLE
SELECT*FROM LOCATION_TABLE

SELECT DATE, SALES, PROFIT, PRODUCT, PRODUCT_TYPE, STATE FROM FACT_TABLE 
INNER JOIN PRODUCT_TABLE ON FACT_TABLE.PRODUCT_ID=PRODUCT_TABLE.PRODUCT_ID INNER JOIN LOCATION_TABLE ON FACT_TABLE.AREA_CODE=LOCATION_TABLE.AREA_CODE

--Q.16 Display the rank without any gap to show the sales wise rank.--
SOLUTION:

SELECT*FROM FACT_TABLE
SELECT PRODUCT_ID, SALES, DENSE_RANK()OVER(ORDER BY SALES DESC) AS SALES_RANK FROM FACT_TABLE 

--Q.17 Find the state wise profit and sales--
SOLUTION:

SELECT*FROM FACT_TABLE
SELECT*FROM LOCATION_TABLE
SELECT STATE, SUM(PROFIT) AS TOTAL_PROFIT, SUM(SALES) AS TOTAL_SALES FROM FACT_TABLE INNER JOIN LOCATION_TABLE ON FACT_TABLE.AREA_CODE=LOCATION_TABLE.AREA_CODE GROUP BY STATE

--Q.18 Find the state wise profit and sales along with the productname--
SOLUTIONS:

SELECT*FROM PRODUCT_TABLE
SELECT STATE, SUM(PROFIT) AS TOTAL_PROFIT, SUM(SALES) AS TOTAL_SALES, PRODUCT FROM FACT_TABLE INNER JOIN LOCATION_TABLE ON FACT_TABLE.AREA_CODE=LOCATION_TABLE.AREA_CODE 
INNER JOIN PRODUCT_TABLE ON FACT_TABLE.PRODUCT_ID=PRODUCT_TABLE.PRODUCT_ID GROUP BY STATE, PRODUCT

--Q.19 If there is an increase in sales of 5%, calculate the increasedsales.
SOLUTIONS:

SELECT*FROM FACT_TABLE
SELECT SALES, (SALES*1.05) AS INCREASEDSALES FROM FACT_TABLE

--Q.20 Find the maximum profit along with the product ID and producttype.--
SOLUTIONS:

SELECT*FROM FACT_TABLE
SELECT*FROM PRODUCT_TABLE
SELECT MAX(PROFIT) AS MAX_PROFIT, PRODUCT_TYPE FROM FACT_TABLE INNER JOIN PRODUCT_TABLE 
ON FACT_TABLE.PRODUCT_ID=PRODUCT_TABLE.PRODUCT_ID GROUP BY  PRODUCT_TYPE

--Q21 Create a stored procedure to fetch the result according to the product type from Product Table.--
SOLUTION:

SELECT*FROM PRODUCT_TABLE

CREATE PROC USP_FETCHPRODUCT(@PRODUCTTYPE VARCHAR(50))
as
BEGIN
(SELECT*FROM PRODUCT_TABLE WHERE PRODUCT_TYPE=@PRODUCTTYPE)
END

EXEC USP_FETCHPRODUCT @PRODUCTTYPE ='TEA'

--Q22 Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else losS.--
SOLUTIONS:

SELECT*FROM FACT_TABLE

SELECT TOTAL_EXPENSES,
CASE
WHEN TOTAL_EXPENSES <60 THEN 'PROFIT'
ELSE 'LOSS'
END AS PROFITLOSS
FROM FACT_TABLE

--Q23 Give the total weekly sales value with the date and product ID details. Use roll-up to pull the data in hierarchical order.--
SOLUTION:

SELECT*FROM FACT_TABLE
SELECT DATEPART(WEEK, DATE) AS WEEKCOLUMN, PRODUCT_ID, SUM(SALES) AS WEEKLYSALES FROM FACT_TABLE 
GROUP BY ROLLUP (DATEPART(WEEK, DATE), PRODUCT_ID) ORDER BY PRODUCT_ID

--Q24 Apply union and intersection operator on the tables which consist of attribute area code.--
SOLUTIONS:

SELECT AREA_CODE FROM FACT_TABLE
UNION
SELECT AREA_CODE FROM LOCATION_TABLE
 
SELECT AREA_CODE FROM FACT_TABLE
INTERSECT
SELECT AREA_CODE FROM LOCATION_TABLE

--Q25 Create a user-defined function for the product table to fetch a particular product type based upon the user’s preference.--
SOLUTIONS:

SELECT*FROM PRODUCT_TABLE

CREATE FUNCTION GETUSERPRODUCT_TYPE(@USERID INT )
RETURNS VARCHAR(50)
AS
BEGIN
DECLARE PRODUCT_TYPE VARCHAR(50)
SELECT @PRODUCT_TYPE=PRODUCT_TYPE FROM PRODUCT_TABLE
WHERE PRODUCT_ID=@USERID
RETURN @PRODUCT_TYPE
END

SELECT DBO.GETUSERPRODUCT_TYPE('40') AS PRODUCT_TYPE

--Q26. Change the product type from coffee to tea where product ID is 1 and undo it.--\
SOLUTION:

SELECT*FROM PRODUCT_TABLE
BEGIN TRANSACTION
UPDATE PRODUCT_TABLE
SET PRODUCT_TYPE='TEA'
WHERE PRODUCT_ID=1

ROLLBACK

--Q27. Display the date, product ID and sales where total expenses are between 100 to 200.--
SOLUTION:

SELECT*FROM FACT_TABLE
SELECT DATE, PRODUCT_ID, SALES, TOTAL_EXPENSES FROM FACT_TABLE WHERE TOTAL_EXPENSES BETWEEN 100 AND 200

--Q28. Delete the records in the Product Table for regular type--
SOLUTION:

SELECT*FROM PRODUCT_TABLE
DELETE FROM PRODUCT_TABLE WHERE TYPE='REGULAR'

--Q29. Display the ASCII value of the fifth character from the columnProduct.--
SOLUTION:

SELECT ASCII(SUBSTRING(PRODUCT, 5,1)) AS ASCII_VALUE FROM PRODUCT_TABLE



































































































































